ods results on;
/******************************************************************\
 This code does the optimization part of MMX. It has to be changed 
 by hand as the models are updated.  This particular example 
 optimizes for three time periods into the future.
\******************************************************************/

/*Set a cost for each input variable into a macro variable*/
%let x1_cost=7;
%let x2_cost=4;
%let x3_cost=250;
%let x4_cost=0.75;
%let x5_cost=3.4;     

/*Set the total cost for the three month time period*/
%let total_cost=10000;

/*Set the ad_stock rate for each variable*/
%let x1_alpha=0.5;
%let x3_alpha=0.9;

/*Set the betas for each parameter*/ 
/*Let's assume our model takes the form:
  y=10.7 + x1_a50*0.15 + 0.2*x2 + 0.05*x3_a90 + 0.09*x4 + Epsilon + Geo_rand;*/

%let x1_a50_beta=0.15;
%let x2_beta=0.2;
%let x3_a90_beta=0.05;
%let x4_beta=0.09;


PROC OPTMODEL;
 
/*Define the raw input variables.  The numeric constraints should be based on the max values in our modeling
  dataset to prevent extrapolation.  Since we are optimizing for three time periods in the future, we need to
  build out the model for all three time periods.  We will append _tN for each version*/

var

    x1_a50>=0 <=15,   x1_a50_t1>=0 <=15,   x1_a50_t2 >=0 <=15,
	x2>=0 <=12,       x2_t1>=0 <=12,       x2_t2>=0 <=12,
	x3_a90>=0 <=13,   x3_a90_t1>=0 <=13,   x3_a90_t2>=0 <=13,
    x4>=0 <=6,        x4_t1 >=0 <=6,       x4_t2 >=0 <=6, 

/*Define the ad-stock variables for the model and make sure they non-negative.  It's important we define the
  non-adstock constraints above since they feed into the ad-stock variables*/
  
    smooth_x1_a50 >=0, smooth_x1_a50_t1>=0, smooth_x1_a50_t2 >=0,
	smooth_x3_a90 >=0, smooth_x3_a90_t1>=0, smooth_x3_a90_t2 >=0;


/*Define the constraints for three months regarding the total spend*/
/*(TimePeriod1Units + TimePeriod2Units + TimePeriod3Units) * Cost*/
con (x1_a50 + x1_a50_t1 + x1_a50_t2)                                     *  &x1_cost           +   
    (x2     + x2_t1     + x2_t2)                                         *  &x2_cost           +
    (x3_a90 + x3_a90_t1 + x3_a90_t2)                                     *  &x3_cost           +
    (x4     + x4_t1     + x4_t2)                                         *  &x4_cost           
                                                                        <=  &total_cost;

/*These constraints are based on the highest three period cost occurs in the dataset*/
con x1_a50 + x1_a50_t1 + x1_a50_t2 <= 320;
con x2     + x2_t1     + x2_t2     <= 64;
con x3_a90 + x3_a90_t1 + x3_a90_t2 <= 7000;
con x4     + x4_t1     + x4_t2     <= 95;



/*For each variable that has been smoothed, a relationship between the orginal variable and the adstock variable
  needs to be defined.
/************X1*************/			
/*For period 1 - The smoothing factor is the retention rate * marketing variable*/ 
con smooth_x1_a50=&x1_alpha*x1_a50;

/*For period 2 - The smooth is the decay rate (1-&alpha)* smooth_x1_a50+
                 the retention rate *marketing variable*/
con smooth_x1_a50_t1=(1-&x1_alpha)*smooth_x1_a50 + &x1_alpha*smooth_x1_a50_t1;

/*For period 3 - The smooth is the decay rate (1-&alpha)* x1_A50_t1 +
                 the retention rate *marketing variable*/
con smooth_x1_a50_t2=(1-&x1_alpha)*smooth_x1_a50_t1+ &x1_alpha*smooth_x1_a50_t2; 
                   

 
/************X3*************/		
con smooth_x3_a90 =  &x3_alpha * x3_a90;

con smooth_x3_a90_t1 = (1-&x3_alpha) * smooth_x3_a90 + &x3_alpha*smooth_x3_a90_t1;

con smooth_x3_a90_t2 = (1-&x3_alpha) * smooth_x3_a90_t1 + &x3_alpha*smooth_x3_a90_t2;

/*Maximize the depdent variable for time periods 1, 2, and 3,*/
max y
/*Plug in the formula generated by the MXX models for Y at time t*/
= ((1+smooth_x1_a50)**&x1_a50_beta) *            /*Y, t=1*/
  ((1+x2)**&x2_beta)*
  ((1+smooth_x3_a90)**&x3_a90_beta) * 
  ((1+x4)**&x4_beta) 

+
  ((1+smooth_x1_a50_t1)**&x1_a50_beta) *            /*Y, t=1*/
  ((1+x2_t1)**&x2_beta)*
  ((1+smooth_x3_a90_t1)**&x3_a90_beta) * 
  ((1+x4_t1)**&x4_beta) 

+ ((1+smooth_x1_a50_t2)**&x1_a50_beta) *            /*Y, t=1*/
  ((1+x2_t2)**&x2_beta)*
  ((1+smooth_x3_a90_t2)**&x3_a90_beta) * 
  ((1+x4_t2)**&x4_beta);

/*No particular solver needs to be specified, SAS will choose*/
solve;

/*All these can be put into a single Print statement, but it's
  easier to read the output this way*/
print x1_a50 x1_a50_t1 x1_a50_t2 ;
print x2 x2_t1 x2_t2 ;
print x3_a90 x3_a90_t1 x3_a90_t2 ;
print x4 x4_t1 x3_t2 ;
RUN;

